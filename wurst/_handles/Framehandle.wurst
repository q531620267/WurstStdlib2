package Framehandle
import NoWurst
import Player
import Vectors
import Colors
import ErrorHandling
import Annotations
import DZ_Blz

/*
	Custom frames can be defined in a frame definition file (*.fdf).
	These files need to be listed inside of a toc file and loaded using loadTOCFile() to be used.
	The toc file *must* always have an empty line at the end.
	Default .fdf files can be found in:
		war3.w3mod:ui\framedef\ui\
		war3.w3mod:ui\framedef\glue\

	Positioning:
		All frames are placed on the screen in a 4:3 box.
		(0, 0) is BOTTOM-LEFT corner of the box and (0.8, 0.6) is TOP-RIGHT corner of the box.
		Currently, there are exceptions. ORIGIN_FRAME_WORLD_FRAME and ORIGIN_FRAME_PORTRAIT are placed on the whole screen so they can go beyond the box' borders. This behaviour affects the frames' size as well. Keep it in mind, if the screen ratio is not 4:3, placing and sizing of ORIGIN_FRAME_WORLD_FRAME and ORIGIN_FRAME_PORTRAIT will not match other frames.

	Synch notes:
		A frame uses the default handlepool - it must not be created locally.
		All frameeventtype are synced events. If a player presses a button, the associated event will fire for all players.
		However, the frame's states are not synced; i.e you can change the text, value, position, visibility or state locally.

		*IMPORTANT:* Always get the framehandle outside of the local scope

	originframetype notes:
		ORIGIN_FRAME_GAME_UI 				    --> Main parent frame
		ORIGIN_FRAME_WORLD_FRAME 			    --> The game is displayed on this frame.
		ORIGIN_FRAME_HERO_BAR 				    --> Parent of all HERO_BUTTONS, HeroButons share the same visiblity.
		ORIGIN_FRAME_HERO_BUTTON [0 to 6]       --> The buttons of own/allied heroes on the left of the screen
			ORIGIN_FRAME_HERO_HP_BAR,
			ORIGIN_FRAME_HERO_MANA_BAR
			ORIGIN_FRAME_HERO_BUTTON_INDICATOR  --> The glowing when a hero has skillpoints; They reappear when a hero gains a new skillpoint even if all originframes are hidden.

		ORIGIN_FRAME_ITEM_BUTTON [0 to 5]       --> Items in the inventory. Reappear on unit's selection even if all originframes are hidden (when the parent's parent is shown)
		ORIGIN_FRAME_COMMAND_BUTTON [0 to 11]   --> Buttons of the the command board. 0 is the (0,0) button, 11 is the (3,2) one. Reappear on unit's selection even if all originframes are hidden
		ORIGIN_FRAME_SYSTEM_BUTTON [0 to 3]     --> Menu, allies, log, quest.
		ORIGIN_FRAME_PORTRAIT 	                --> Portrait of the selected unit (this frame is not on the 4:3 screen but on the whole screen)
		ORIGIN_FRAME_MINIMAP
		ORIGIN_FRAME_MINIMAP_BUTTON [0 to 4]    --> 0 is the button at top, 4 the one at the bottom.
		ORIGIN_FRAME_TOOLTIP
		ORIGIN_FRAME_UBERTOOLTIP                --> Frame of the game's tooltips
		ORIGIN_FRAME_CHAT_MSG                   --> Frame of the game's messages (e.g. from DisplayTextToPlayer())
		ORIGIN_FRAME_UNIT_MSG                   --> Frame of the UpKeep change warning message, below the clock
*/
public tuple framehandle(int id)
public tuple frameeventtype(int id)
public tuple framepointtype(int id)

public constant GAME_UI  = framehandle(DzGetGameUI())
// public constant WORLD_UI = BlzGetOriginFrame(ORIGIN_FRAME_WORLD_FRAME, 0)

// frame event type
/** 鼠标点击 */
public constant FRAMEEVENT_CONTROL_CLICK          = frameeventtype(1)   // 鼠标点击
/** 鼠标进入 */
public constant FRAMEEVENT_MOUSE_ENTER            = frameeventtype(2)   // 鼠标进入
/** 鼠标离开 */
public constant FRAMEEVENT_MOUSE_LEAVE            = frameeventtype(3)   // 鼠标离开
/** 鼠标释放 */
public constant FRAMEEVENT_MOUSE_UP               = frameeventtype(4)   // 鼠标释放
/** 鼠标弹起(无效) */
public constant FRAMEEVENT_MOUSE_DOWN             = frameeventtype(5)   // 鼠标弹起(无效)
/** 鼠标轮滚 */
public constant FRAMEEVENT_MOUSE_WHEEL            = frameeventtype(6)   // 鼠标轮滚
/** 复选框-被选中 */
public constant FRAMEEVENT_CHECKBOX_CHECKED       = frameeventtype(7)   // 复选框-被选中
/** 复选框-取消选中 */
public constant FRAMEEVENT_CHECKBOX_UNCHECKED     = frameeventtype(8)   // 复选框-取消选中
/** 输入框-改变文本 */
public constant FRAMEEVENT_EDITBOX_TEXT_CHANGED   = frameeventtype(9)   // 输入框-改变文本
/** 菜单-被改变 */
public constant FRAMEEVENT_POPUPMENU_CHANGED      = frameeventtype(10)  // 菜单-被改变
/** 菜单-项目被改变 */
public constant FRAMEEVENT_POPUPMENU_ITEM_CHANGED = frameeventtype(11)  // 菜单-项目被改变
/** 鼠标双击 */
public constant FRAMEEVENT_MOUSE_DOUBLECLICK      = frameeventtype(12)  // 鼠标双击
/** 动画更新(无效) */
public constant FRAMEEVENT_SPRITE_ANIM_UPDATE     = frameeventtype(13)  // 动画更新(无效)

// frame point type
/** 左上 */
public constant FRAMEPOINT_TOPLEFT     = framepointtype(0)  // 左上
/** 顶部 */
public constant FRAMEPOINT_TOP         = framepointtype(1)  // 顶部
/** 右上 */
public constant FRAMEPOINT_TOPRIGHT    = framepointtype(2)  // 右上
/** 左 */
public constant FRAMEPOINT_LEFT        = framepointtype(3)  // 左侧
/** 中间 */
public constant FRAMEPOINT_CENTER      = framepointtype(4)  // 中间
/** 右 */
public constant FRAMEPOINT_RIGHT       = framepointtype(5)  // 右侧
/** 左下 */
public constant FRAMEPOINT_BOTTOMLEFT  = framepointtype(6)  // 左下
/** 下 */
public constant FRAMEPOINT_BOTTOM      = framepointtype(7)  // 底部
/** 右下 */
public constant FRAMEPOINT_BOTTOMRIGHT = framepointtype(8)  // 右下


public constant SCREEN_CENTER             = vec2(0.4, 0.3)
public constant SCREEN_TOPRIGHT           = vec2(0.8, 0.6)
public constant SCREEN_TOPLEFT            = vec2(0.0, 0.6)
public constant SCREEN_BOTTOMRIGHT        = vec2(0.8, 0.0)
public constant SCREEN_BOTTOMLEFT         = vec2(0.0, 0.0)
public constant SCREEN_RIGHT              = vec2(0.8, 0.3)
public constant SCREEN_LEFT               = vec2(0.0, 0.3)
public constant SCREEN_TOP                = vec2(0.4, 0.6)
public constant SCREEN_BOTTOM             = vec2(0.4, 0.0)

// These defines represent the whole 16:9 screen size. Only Frames of type 'SIMPLE' can be moved here. 
public constant WHOLE_SCREEN_TOPRIGHT     = vec2( 0.95, 0.6)
public constant WHOLE_SCREEN_TOPLEFT      = vec2(-0.15, 0.6)
public constant WHOLE_SCREEN_BOTTOMRIGHT  = vec2( 0.95, 0.0)
public constant WHOLE_SCREEN_BOTTOMLEFT   = vec2(-0.15, 0.0)
public constant WHOLE_SCREEN_RIGHT        = vec2( 0.95, 0.3)
public constant WHOLE_SCREEN_LEFT         = vec2(-0.15, 0.3)
public constant WHOLE_SCREEN_TOP          = SCREEN_TOP
public constant WHOLE_SCREEN_BOTTOM       = SCREEN_BOTTOM

constant BLZ_FRAMENAME_MAXLENGTH    = 560

/** Returns whether the frame name length is valid or not */
function verifyFrameNameLength(string name) returns boolean
	if name.length() > BLZ_FRAMENAME_MAXLENGTH
		error("Trying to address frame with exceeding maximum frame name length (" + BLZ_FRAMENAME_MAXLENGTH.toString() + ") for: " + name)
		return false
	return true

/**获取子SimpleFrame
获取名字为${name}的子SimpleFrameID:0
同名时优先获取最后被创建的。SimpleFrame为fdf中的Frame类型。 
 */
public function getSimpleFrame(string name) returns framehandle
	return framehandle(DzSimpleFrameFindByName(name, 0))

/** 获取子SimpleFrame
获取名字为${name}的子SimpleFrameID:${Id}
ID默认填0，同名时优先获取最后被创建的。SimpleFrame为fdf中的Frame类型。
 */
public function getSimpleFrame(string name, integer index) returns framehandle
	return framehandle(DzSimpleFrameFindByName(name, index))

@deprecated("Use getFrame(name) instead.")
public function getFrameByName(string name) returns framehandle
	verifyFrameNameLength(name)
	return getFrame(name)

@deprecated("Use getFrame(name, createContext) instead.")
public function getFrameByName(string name, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return getFrame(name, createContext)

/**获取子Frame
获取名字为${name}的子FrameID:${Id}
ID默认填0，同名时优先获取最后被创建的。非Simple类的Frame类型都用此函数来获取子Frame。	
 */
public function getFrame(string name, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return framehandle(DzFrameFindByName(name, createContext))

/**	获取子Frame
获取名字为${name}的子FrameID:0
ID默认填0，同名时优先获取最后被创建的。非Simple类的Frame类型都用此函数来获取子Frame。	 
*/
public function getFrame(string name) returns framehandle
	verifyFrameNameLength(name)
	return getFrame(name, 0)

/** 新建Frame
新建Frame名字:${frame}
默认父节点:GAME_UI.id
默认ID:0
名字为fdf文件中的名字，ID默认填0。重复创建同名Frame会导致游戏退出时显示崩溃消息，如需避免可以使用Tag创建 
*/
public function createFrame(string name) returns framehandle
	verifyFrameNameLength(name)
	return framehandle(DzCreateFrame(name, GAME_UI.id, 0))

/** 新建Frame
新建Frame名字:${name}
父节点:${owner}
ID:${createContext}
名字为fdf文件中的名字，ID默认填0。重复创建同名Frame会导致游戏退出时显示崩溃消息，如需避免可以使用Tag创建
*/
public function createFrame(string name, framehandle owner, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return framehandle(DzCreateFrame(name, owner.id, createContext))

/** 创建简单的UI
新建Frame名字:${name}
默认父节点:GAME_UI.id
默认ID:0
*/
public function createSimpleFrame(string name) returns framehandle	
	verifyFrameNameLength(name)
	return framehandle(DzCreateSimpleFrame(name, GAME_UI.id, 0))

/** 创建简单的UI 
新建Frame名字:${name}
父节点:${owner}
ID:${createContext}
*/
public function createSimpleFrame(string name, framehandle owner, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return framehandle(DzCreateSimpleFrame(name, owner.id, createContext))

/** 新建Frame[Tag]
创建类型:${typeName}
名字:${name}
父节点:${owner}
模版:${inherits}
ID:${createContext}
此处名字可以自定义，类型和模版填写fdf文件中的内容。通过此函数创建的Frame无法获取到子Frame。
 */
public function createFrame(string typeName, string name, framehandle owner, string inherits, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return framehandle(DzCreateFrameByTagName(typeName, name, owner.id, inherits, createContext))

@deprecated("Use createFrame(typeName, name, owner, inherits, createContext) instead.")
public function createFrameByType(string typeName, string name, framehandle owner, string inherits, integer createContext) returns framehandle
	verifyFrameNameLength(name)
	return createFrame(typeName, name, owner, inherits, createContext)

/** 销毁UI */
public function framehandle.remove()
	DzDestroyFrame(this.id)

/**	设置UI绝对位置 在屏幕中间*/
public function framehandle.setCenter()
	DzFrameSetAbsolutePoint(this.id, FRAMEPOINT_CENTER.id, SCREEN_CENTER.x, SCREEN_CENTER.y)

/**	设置UI绝对位置 
父节点:${point}
X:x
Y:y
*/
public function framehandle.setAbsPoint(framepointtype point, real x, real y)
	DzFrameSetAbsolutePoint(this.id, point.id, x, y)

/**	设置UI绝对位置 
父节点:${point}
X:vec2.x
Y:vec2.y 
*/
public function framehandle.setAbsPoint(framepointtype point, vec2 pos)
	DzFrameSetAbsolutePoint(this.id, point.id, pos.x, pos.y)

/** 设置相对位置
设置${frame}的${Point}锚点(跟随Frame-->${relativeFrame}的${relativePoint}锚点)偏移(${x默认0},${y默认0}) 
*/
public function framehandle.setPoint(framepointtype point, framehandle relative, framepointtype relativePoint)
	DzFrameSetPoint(this.id, point.id, relative.id, relativePoint.id, 0, 0)

/** 设置相对位置
设置${frame}的${Point}锚点(跟随Frame-->${relativeFrame}的${relativePoint}锚点)偏移(${x：vec2.x},${y：vec2.y})
*/
public function framehandle.setPoint(framepointtype point, framehandle relative, framepointtype relativePoint, vec2 offset)
	DzFrameSetPoint(this.id, point.id, relative.id, relativePoint.id, offset.x, offset.y)

/** 设置相对位置
设置${frame}的${Point}锚点(跟随Frame-->${relativeFrame}的${relativePoint}锚点)偏移(${x：offsetX},${y：offsetY}) */
public function framehandle.setPoint(framepointtype point, framehandle relative, framepointtype relativePoint, real offsetX, real offsetY)
	DzFrameSetPoint(this.id, point.id, relative.id, relativePoint.id, offsetX, offsetY)

/** 清空所有锚点 */
public function framehandle.clearAllPoints()
	DzFrameClearAllPoints(this.id)

/** 移动所有锚点到Frame */
public function framehandle.setAllPoints(framehandle relative)
	DzFrameSetAllPoints(this.id, relative.id)

/** 显示/隐藏UI */
public function framehandle.setVisible(bool flag)
	DzFrameShow(this.id, flag)

@deprecated("Use .setVisible(player p, bool flag) instead.")
public function framehandle.setVisibleFor(player p, bool flag)
	this.setVisible(p, flag)

/** 设置UI玩家 是否可见 */
public function framehandle.setVisible(player p, bool flag)
	if localPlayer == p or p == null
		this.setVisible(flag)

/** 显示UI */
public function framehandle.show()
	this.setVisible(true)

@deprecated("Use .show(player p) instead.")
public function framehandle.showFor(player p)
	this.show(p)

/** 设置UI玩家 可见 */
public function framehandle.show(player p)
	this.setVisible(p, true)

/** 隐藏UI */
public function framehandle.hide()
	this.setVisible(false)

@deprecated("Use .hide(player p) instead.")
public function framehandle.hideFor(player p)
	this.hide(p)

/** 设置UI玩家 隐藏 */
public function framehandle.hide(player p)
	this.setVisible(p, false)

// /** Returns whether the frame is visible or not */
// public function framehandle.isVisible() returns bool
// 	return DzFrameGetEnable(this.id)

// /** Returns whether the frame is visible or not for given player */
// public function framehandle.isVisible(player p) returns boolean
// 	return localPlayer == p or p == null ? this.isVisible() : false

@deprecated("Use .getName() instead.")
public function framehandle.name() returns string
	return this.getName()

/** 获取Frame的名称 */
public function framehandle.getName() returns string
	return DzFrameGetName(this.id)

/** 点击UI */
public function framehandle.click()
	DzClickFrame(this.id)

/** 获取Frame内的文字
（支持EditBox,TextFrame,TextArea,SimpleFontString） 
*/
public function framehandle.getText() returns string
	return DzFrameGetText(this.id)

/** 设置文本
设置${frame}的文本为${string}
(支持EditBox,TextFrame,TextArea,SimpleFontString、GlueEditBoxWar3、SlashChatBox、TimerTextFrame、TextButtonFrame、GlueTextButton) 
*/
public function framehandle.setText(string text)
	DzFrameSetText(this.id, text)

/** 设置玩家 UI 文字 */
public function framehandle.setText(player p, string text)
	if localPlayer == p or p == null
		this.setText(text)

/** 获取Frame的字数限制（支持EditBox） */
public function framehandle.getTextSizeLimit() returns integer
	return DzFrameGetTextSizeLimit(this.id)

/** 设置Frame的字数限制 */
public function framehandle.setTextSizeLimit(integer size)
	DzFrameSetTextSizeLimit(this.id, size)

/** 设置文字颜色（支持TextFrame, EditBox） 
color:colorA
*/
public function framehandle.setTextColor(colorA color)
	DzFrameSetTextColor(this.id, DzGetColor(color.alpha, color.red, color.green, color.blue))

/** 设置文字颜色（支持TextFrame, EditBox） 
color:integer
*/
public function framehandle.setTextColor(integer color)
	DzFrameSetTextColor(this.id, color)

/** 设置焦点 设置UI获取焦点${flag} 
*/
public function framehandle.setFocus(bool flag)
	DzFrameSetFocus(this.id, flag)

/** 设置玩家焦点 设置玩家${p}UI获取焦点${flag} */
public function framehandle.setFocus(player p, bool flag)
	if localPlayer == p or p == null
		this.setFocus(flag)

/** Removes the focus from a given frame by disable and instantly enabling it. Mandatory for Frames of type 'SIMPLE' */
public function framehandle.unfocus()
	if this.isEnabled()
		this.disable()
		this.enable()
	else
		this.enable()
		this.disable()

	this.setFocus(false)

/** Removes the focus from a given frame by disable and instantly enabling it for given player. Mandatory for Frames of type 'SIMPLE' */
public function framehandle.unfocus(player p)
	if this.isEnabled(p)
		this.disable(p)
		this.enable(p)
	else
		this.enable(p)
		this.disable(p)

	this.setFocus(p, false)    

/** 设置模型
设置${frame}的模型文件为${modelFile}ModelType:${modelType}Flag:${flag}
 */
public function framehandle.setModel(string modelFile, int modelType, int flag)
	DzFrameSetModel(this.id, modelFile, modelType, flag)

/** 获取控件是否启用 */
public function framehandle.isEnabled() returns bool
	return DzFrameGetEnable(this.id)
	
/** 获取-玩家-控件是否启用 */
public function framehandle.isEnabled(player p) returns boolean
	return localPlayer == p or p == null ? this.isEnabled() : false

/** UI启用/禁用 */
public function framehandle.setEnabled(bool enabled)
	DzFrameSetEnable(this.id, enabled)

/** UI启用 */
public function framehandle.enable()
	this.setEnabled(true)

/** UI禁用 */
public function framehandle.disable()
	this.setEnabled(false)
	
/** 玩家UI启用 */
public function framehandle.enable(player p)
	if localPlayer == p or p == null
		this.enable()
	
/** 玩家UI禁用 */
public function framehandle.disable(player p)
	if localPlayer == p or p == null
		this.disable()

/** 获取Frame的透明度(0-255) */
public function framehandle.getAlpha() returns int
	return DzFrameGetAlpha(this.id)

/** 设置透明度（0-255） */
public function framehandle.setAlpha(int alpha)
	DzFrameSetAlpha(this.id, alpha)
	
/** 设置玩家透明度（0-255） */
public function framehandle.setAlpha(player p, int alpha)
	if localPlayer == p or p == null
		this.setAlpha(alpha)
		
/** 设置动画 播放序号${int}的动画自动播放:${bool} */
public function framehandle.setSpriteAnimate(int animId, bool autoCast)
	DzFrameSetAnimate(this.id, animId, autoCast)

/** 设置贴图
设置${frame}的贴图为:${texture}是否平铺${flag}（支持Backdrop、SimpleStatusBar） */
public function framehandle.setTexture(string texFile, integer flag)
	DzFrameSetTexture(this.id, texFile, flag)

/** 设置玩家UI贴图
设置${frame}的贴图为:${texture}是否平铺${flag}（支持Backdrop、SimpleStatusBar） 
*/
public function framehandle.setTexture(player p, string texFile, integer flag)
	if localPlayer == p or p == null
		this.setTexture(texFile, flag)

/** 设置缩放 */
public function framehandle.setScale(real scale)
	DzFrameSetScale(this.id, scale)

/** 设置提示
设置${frame}的提示Frame为${tooltip}
设置tooltip
*/
public function framehandle.setTooltip(framehandle tooltip)
	DzFrameSetTooltip(this.id, tooltip.id)

/** 限制鼠标移动 */
public function framehandle.cageMouse(bool enable)
	DzFrameCageMouse(this.id, enable)

/** 获取当前值（支持Slider、SimpleStatusBar、StatusBar） */
public function framehandle.getValue() returns real
	return DzFrameGetValue(this.id)

/** 设置当前值（支持Slider、SimpleStatusBar、StatusBar） */
public function framehandle.setValue(real value)
	DzFrameSetValue(this.id, value)

@deprecated("Use .setMinMax(minValue, maxValue) instead.")
public function framehandle.minMax(real minValue, real maxValue)
	this.setMinMax(minValue,maxValue)

/** 设置最大/最小值 设置${frame}的最小值为${Min}最大值为${Max}
（支持Slider、SimpleStatusBar、StatusBar） 
*/
public function framehandle.setMinMax(real minValue, real maxValue)
	DzFrameSetMinMaxValue(this.id, minValue, maxValue)

/** 设置步进值
设置${frame}的步进值为${step}（支持Slider） 
*/
public function framehandle.setStepSize(real stepSize)
	DzFrameSetStepValue(this.id, stepSize)

// /** Sets the width of the frame (sets the height to its current height) */
// public function framehandle.setWidth(real width)
// 	BlzFrameSetSize(this, width, this.getHeight())

// /** Sets the height of the frame (sets the width to its current width) */
// public function framehandle.setHeight(real height)
// 	BlzFrameSetSize(this, this.getWidth(), height)

/** 设置大小
设置${frame}（宽${w}高${h}）
 */
public function framehandle.setSize(real width, real height)
	DzFrameSetSize(this.id, width, height)

/** 设置颜色
设置${frame}颜色${color} 
*/
public function framehandle.setVertexColor(integer color)
	DzFrameSetVertexColor(this.id, color)

/** If multiple frames cover each other, the one with the highest level will receive mouse events and will be drawn above the others. If several frames have the same level, the last created one is prioritized */
public function framehandle.setLevel(integer level)
	DzFrameSetPriority(this.id, level)

/** 获取Frame的Parent */
public function framehandle.getParent() returns framehandle
	return framehandle(DzFrameGetParent(this.id))

/** 设置父窗口 设置${frame}的父窗口为${frame2} */
public function framehandle.setParent(framehandle parent)
	DzFrameSetParent(this.id, parent.id)

@deprecated("use getHeight() instead") public function framehandle.height() returns real
	return this.getHeight()

// @deprecated("use getWidth() instead") public function framehandle.width() returns real
// 	return this.getWidth()

/** 获取 Frame 的 高度 */
public function framehandle.getHeight() returns real
	return DzFrameGetHeight(this.id)

// /** Returns the frame's width */
// public function framehandle.getWidth() returns real
// 	return BlzFrameGetWidth(this)

/** 设置字体
设置${frame}的字体为${font},大小${height},flag${flag}
支持EditBox、SimpleFontString、SimpleMessageFrame以及非SimpleFrame类型的例如TEXT，flag作用未知
*/
public function framehandle.setFont(string fileName, real height, integer flags)
	DzFrameSetFont(this.id, fileName, height, flags)

/** 设置对齐方式
设置${frame}的对齐方式为${align}
支持TextFrame、SimpleFontString、SimpleMessageFrame 
*/
public function framehandle.setTextAlignment(int align)
	// textaligntype vert, textaligntype horz
	DzFrameSetTextAlignment(this.id, align)

/** 不明觉厉 */
public function enableUIAutoPosition(bool flag)
	DzOriginalUIAutoResetPoint(flag)

// /** Hides or shows all origin frames except ORIGIN_FRAME_WORLD_FRAME */
// public function setOriginFramesVisible(bool flag)
// 	BlzHideOriginFrames(not flag)

// @deprecated("Use setOriginFramesVisible(bool flag) instead.")
// public function hideOriginFrames(bool flag)
// 	setOriginFramesVisible(not flag)

/** 原生-隐藏界面元素
隐藏所有界面UI
不再在地图初始化时调用则会残留小地图和时钟模型 
*/
public function hideOriginFrames()
	DzFrameHideInterface()

// /** Shows all origin frames except ORIGIN_FRAME_WORLD_FRAME */
// public function showOriginFrames()
// 	setOriginFramesVisible(true)

/** 加载Toc文件列表 加载-->${fileName.toc}
载入自己的fdf列表文件 
*/
public function loadTOCFile(string tocFile)
	DzLoadToc(tocFile)

let mouseCage = createFrame("FRAME", "SetMousePositionCage", GAME_UI, null, 0)
	..setSize(0.0001, 0.0001)

/** Places the mouse cursor at the given point of the screen. Uses the same coodinate system as framehandles */
public function setMousePos(vec2 pos)
	mouseCage..clearAllPoints()
	..setPoint(FRAMEPOINT_BOTTOMLEFT, GAME_UI, FRAMEPOINT_BOTTOMLEFT, pos)
	..cageMouse(true)
	..cageMouse(false)

/** Places the mouse cursor in the center of the frame */
public function framehandle.setMousePos()
	mouseCage..clearAllPoints()
	..setPoint(FRAMEPOINT_CENTER, this, FRAMEPOINT_CENTER)
	..cageMouse(true)
	..cageMouse(false)

/** Places the mouse cursor at the given point of the screen. Uses the window's coordinate system (in pixels) where (0, 0) is top-left corner of the window and positive direction of Y axis is "down" */
public function setMousePos(integer x, integer y)
	DzSetMousePos(x, y)

// public function enableCursor()
// 	BlzEnableCursor(true)

// public function disableCursor()
// 	BlzEnableCursor(false)

// public function setCursorEnabled(bool flag)
// 	BlzEnableCursor(flag)

// /** Get number of children frames of given frame. Only direct child frames are counted */ 
// public function framehandle.getChildrenCount() returns int
// 	return BlzFrameGetChildrenCount(this)

// /** Get child frame handle from given index */
// public function framehandle.getChild(int index) returns framehandle
// 	return BlzFrameGetChild(this, index)
